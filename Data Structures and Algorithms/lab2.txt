import time



class Bag():
    
    def __init__(self):
        self.__elements = []
        self.__frequencies = []
        self.__size = 0
    
    def add(self, element):
        if element in self.__elements:
            index = self.__elements.index(element)
            self.__frequencies[index] += 1
        else:
            self.__elements.append(element)
            self.__frequencies.append(1)
        self.__size += 1
    
    def remove(self, element):
        if element in self.__elements:
            index = self.__elements.index(element)
            self.__frequencies[index] -= 1
            if self.__frequencies[index] == 0:
                self.__elements.pop(index)
                self.__frequencies.pop(index)
            self.__size -= 1
            return True
        else:
            return False
    
    def search(self, element):
        return element in self.__elements
    
    def size(self):
        return self.__size
    
    def isEmpty(self):
        return self.__size == 0
    
    def nrOccurrences(self, element):
        if element in self.__elements:
            index = self.__elements.index(element)
            return self.__frequencies[index]
        else:
            return 0
    
    def iterator(self):
        return Iterator(self)


class Iterator():
    
    def __init__(self, bag):
        self.__bag = bag
        self.__current_position = 0
        self.__current_element_index = 0
        self.__current_frequency = 1
    
    def first(self):
        self.__current_position = 0
        self.__current_element_index = 0
        self.__current_frequency = 1
    
    def valid(self):
        return self.__current_position < self.__bag.size()
    
    def next(self):
        if not self.valid():
            raise ValueError
        self.__current_position += 1
        self.__current_frequency += 1
        if self.__current_frequency == self.__bag._Bag__frequencies[self.__current_element_index] + 1:
            self.__current_element_index += 1
            self.__current_frequency = 1
    
    def getCurrent(self):
        if not self.valid():
            raise ValueError
        return self.__bag._Bag__elements[self.__current_element_index]